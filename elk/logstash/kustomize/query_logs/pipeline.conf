filter {

  grok {
    match => {
      "[log][file][path]" => "%{GREEDYDATA}/data/%{GREEDYDATA:[neo4j][ticket_number]}/%{GREEDYDATA:[neo4j][hostname]}/logs/%{GREEDYDATA}\.log"
    }
  }

  # Since syn-30, the multiline codec now ignores lines beginning with a timestamp or {
  # We will check the message being with a ISO8601 timestamp before parsing.
  # This only deals with plain text and JSON is handled later
  if [message] =~ "^([0-9]{4})-?(1[0-2]|0[1-9])-?(3[01]|0[1-9]|[12][0-9])" {

    # handle timestamp and log level
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:[@metadata][timestamp]}%{SPACE}%{LOGLEVEL:[log][level]}%{SPACE}%{GREEDYDATA:message}"
      }
      overwrite => [ "message" ]
    }

    date {
      match => ["[@metadata][timestamp]","ISO8601"]
    }

    # Query log can contain a Query started event which only serves to inform that a query has stated
    # This event typically does not contain much useful information on the performance of the query
    # event.type=end can be used to filter out events that do contain useful performance information on the query.
    if [message] =~ "^Query started:" {
      mutate {
        replace => {
          "[event][type]" => "started"
        }
      }
    }
    else {
      mutate {
        replace => {
          "[event][type]" => "end"
        }
      }
    }


    grok {
      match => {
        "message" => [
        "(?m)(:?Query started: )?(:?id:%{NUMBER:[neo4j][query][id]:int} - )?(:?transaction id:%{NUMBER:[neo4j][query][transactionId]:int} - )?%{NUMBER:[neo4j][query][elapsedTimeMs]:int} ms: (:?\(planning: %{NUMBER:[neo4j][query][planning]:int},(:? cpu: %{NUMBER:[neo4j][query][cpu]:int},)? waiting: %{NUMBER:[neo4j][query][waiting]:int}\) - %{NUMBER:[neo4j][query][allocatedBytes]:int} B - (:?%{NUMBER:[neo4j][query][pageHits]:int} page hits, %{NUMBER:[neo4j][query][pageFaults]:int} page faults - )?)?%{NOTSPACE:[neo4j][query][session_type]}\s+(:?%{NOTSPACE:[neo4j][query][protocol]}\s+)?(:?%{DATA:[neo4j][query][driver_type]}\s+client/%{NOTSPACE:[neo4j][query][client_ip]}:%{NUMBER:[neo4j][query][client_port]:int}\s+server/%{NOTSPACE:[neo4j][query][server_ip]}:%{NUMBER:[neo4j][query][server_port]:int}>\s+)?%{NOTSPACE:[neo4j][database]} - %{DATA:[neo4j][query][username]} - %{DATA:[neo4j][query][query]} - (:?(:?%{NOTSPACE:[neo4j][query][queryParameters]} - )?runtime=%{NOTSPACE:[neo4j][query][runtime]} - %{GREEDYDATA:[neo4j][query][annotationData]})?",
        "(?m)(:?Query started: )?(:?id:%{NUMBER:[neo4j][query][transactionId]:int} - )?%{NUMBER:[neo4j][query][elapsedTimeMs]:int} ms: \(planning: %{NUMBER:[neo4j][query][planning]:int},(:? cpu: %{NUMBER:[neo4j][query][cpu]:int},)? waiting: %{NUMBER:[neo4j][query][waiting]:int}\) - %{NUMBER:[neo4j][query][allocatedBytes]:int} B - (:?%{NUMBER:[neo4j][query][pageHits]:int} page hits, %{NUMBER:[neo4j][query][pageFaults]:int} page faults - )?%{NOTSPACE:[neo4j][query][session_type]}\s+%{NOTSPACE:[neo4j][query][protocol]}\s+%{NOTSPACE:[neo4j][query][client_ip]}\s+%{NOTSPACE:[neo4j][query][queryParameters]}\s+%{DATA:[neo4j][database]} - %{DATA:[neo4j][query][username]} - %{DATA:[neo4j][query][query]} - runtime=%{NOTSPACE:[neo4j][query][runtime]} - %{GREEDYDATA:[neo4j][query][annotationData]}"
        ]
      }
    }
  }
  else {
    # Since syn-30 we could also have JSON events
    # We no check for these as well 
    if [message] =~ "^{" {
      json {
        source => "message"
      }
      date {
        match => ["[time]","ISO8601"]
        remove_field => ["[time]"]
      }

      # query log JSON events can contain many fields. 
      # if they exist, they are renamed to Synlig schemas.
      if [level] {
        mutate {
          rename => {
            "[level]" => "[neo4j][query][log_level]"
          }
        }
      }

      if [event] {
        mutate {
          rename => {
            "[event]" => "[neo4j][query][event]"
          }
        }
      }

      if [type] {
        mutate {
          rename => {
            "[type]" => "[neo4j][query][type]"
          }
        }
      }

      if [elapsedTimeMs] {
        mutate {
          rename => {
            "[elapsedTimeMs]" => "[neo4j][query][elapsedTimeMs]"
          }
        }
      }

      if [planning] {
        mutate {
          rename => {
            "[planning]" => "[neo4j][query][planning]"
          }
        }
      }

      if [waiting] {
        mutate {
          rename => {
            "[waiting]" => "[neo4j][query][waiting]"
          }
        }
      }

      if [allocatedBytes] {
        mutate {
          rename => {
            "[allocatedBytes]" => "[neo4j][query][allocatedBytes]"
          }
        }
      }

      if [pageHits] {
        mutate {
          rename => {
            "[pageHits]" => "[neo4j][query][pageHits]"
          }
        }
      }

      if [pageFaults] {
        mutate {
          rename => {
            "[pageFaults]" => "[neo4j][query][pageFaults]"
          }
        }
      }

      if [source] {
        mutate {
          rename => {
            "[source]" => "[neo4j][query][source]"
          }
        }
      }

      if [database] {
        mutate {
          rename => {
            "[database]" => "[neo4j][database]"
          }
        }
      }

      if [username] {
        mutate {
          rename => {
            "[username]" => "[neo4j][query][username]"
          }
        }
      }

      if [executingUser] {
        mutate {
          rename => {
            "[executingUser]" => "[neo4j][query][executingUser]"
          }
        }
      }

      if [authenticatedUser] {
        mutate {
          rename => {
            "[authenticatedUser]" => "[neo4j][query][authenticatedUser]"
          }
        }
      }

      if [query] {
        mutate {
          rename => {
            "[query]" => "[neo4j][query][query]"
          }
        }
      }

      if [queryParameters] {
        mutate {
          rename => {
            "[queryParameters]" => "[neo4j][query][queryParameters]"
          }
        }
      }

      if [runtime] {
        mutate {
          rename => {
            "[runtime]" => "[neo4j][query][runtime]"
          }
        }
      }

      if [annotationData] {
        mutate {
          rename => {
            "[annotationData]" => "[neo4j][query][annotationData]"
          }
        }
      }

      if [transactionId] {
        mutate {
          rename => {
            "[transactionId]" => "[neo4j][query][transactionId]"
          }
        }
      }
    }
    else {
      drop {
      }
    }
  }


  # required as per: https://github.com/elastic/ecs/issues/35
  # This GH issue seems to affect the file input plugin also
  mutate {
    remove_field => [ "host" ]
  }

  # added for ECS support
  mutate {
    replace => {
      "[event][dataset]" => "query.log"
    }
  }
}
input {
    file {
    path => ["/home/logstash/data/**/**/logs/*query.log*"]
    exclude => ["*.zip","*.tgz","*.gz"]
    mode => "read" 
    exit_after_read => true
    file_completed_action => log
    # must be set when file_completed_action is log
    file_completed_log_path => "/usr/share/logstash/query_file.log"
    # uncomment for dev purposes
    #sincedb_path => "/dev/null"
    start_position => "beginning"
    tags => ["query_log"]
    file_chunk_size => 30000000
    codec => multiline {
      pattern => "(^%{TIMESTAMP_ISO8601} )|(^{)"
      negate => true
      what => previous
      # Some debug logs contain a large amount of multiline data, the first few lines are enough
      max_lines => 2000
    }
  }
}
output {
  elasticsearch {
    hosts => [ "${ECK_ES_HOSTS}" ]
    user => "${ECK_ES_USER}"
    password => "${ECK_ES_PASSWORD}"
    ssl_certificate_authorities => "${ECK_ES_SSL_CERTIFICATE_AUTHORITY}"
    data_stream => "true"
    data_stream_namespace => "synlig"
  }
}