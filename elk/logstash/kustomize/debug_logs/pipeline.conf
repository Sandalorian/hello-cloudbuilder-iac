filter {

  grok {
    match => {
      "[log][file][path]" => "%{GREEDYDATA}/data/%{GREEDYDATA:[neo4j][ticket_number]}/%{GREEDYDATA:[neo4j][hostname]}/logs/%{GREEDYDATA}\.log"
    }  
  }  
  
  
  # Since syn-30, the multiline codec now ignores lines beginning with a timestamp or {
  # We now need to check if the event is plain text or JSON.
  if [message] =~ "^{" {
    json {
      source => "message" 
    }
    mutate {
      rename => {
        "[time]" => "[@metadata][timestamp]"
        "[category]" => "[neo4j][debug][java_class]"
        "[level]" => "[neo4j][debug][log_level]"
      }
      remove_field => ["[time]"]
    }
  }
  else {
    dissect {
      mapping => {
        "message" => "%{[@metadata][timestamp]} %{+[@metadata][timestamp]} %{[neo4j][debug][log_level]} [%{[neo4j][debug][java_class]}] %{message}"
      }
    }
  }

  date {
    match => ["[@metadata][timestamp]","ISO8601"]
  }

  # parse out GC stats
  if [neo4j][debug][java_class] == "o.n.k.i.c.VmPauseMonitorComponent" {
    grok {
      match => {
        "message" => "Detected VM stop-the-world pause: \{%{WORD}=%{NONNEGINT:[neo4j][debug][garbage_collection][pause_time]:int},%{SPACE}%{WORD}=%{NONNEGINT:[neo4j][debug][garbage_collection][time]:int},%{SPACE}%{WORD}=%{NONNEGINT:[neo4j][debug][garbage_collection][count]:int}\}"
      }
    }
  }

  # #80: Check if we can parse out a database name from the beginning of a message
  # check if message begins with database information
  # in some early Neo4j versions this can be in the form [database_name]
  # in some 4.x versions and in 5.x this is in the form [database_name/database_id]
  # we dissect this and then take action based on what we find
  if [message] =~ "^\[" {
    # This dissect strips out [ and ] characters
    dissect {
      mapping => {
        "message" => "[%{[@metadata][dissected_database_name]}] %{}"
      }
    }
    # We need to check if we hit a known non database name, and only parse when this is not true
    if [@metadata][dissected_database_name] in ["raft-server","catchup-server","backup-server"] or [@metadata][dissected_database_name] =~ "^outbound connection to|^bolt-" {
      # do nothing
    }
    else {
      # check if this is database_name/database_id
      if "/" in [@metadata][dissected_database_name] {
        dissect {
          mapping => {
            "[@metadata][dissected_database_name]" => "%{[neo4j][database_name]}/%{[neo4j][database_id]}"
          }
        }
      }
      # check if this is database_name
      else {
        dissect {
          mapping => {
            "[@metadata][dissected_database_name]" => "%{[neo4j][database_name]}"
          }
        }
      }
    }
  }

  # Parse out checkpoint completed stats

  if [neo4j][debug][java_class] == "o.n.k.i.t.l.c.CheckPointerImpl" {
    mutate {
      add_tag => ["checkpoint"]
    }

    # #80: refactored this check as we added parsing for neo4j.database_name and neo4j.database_id
    # we now only check to see if we have already parsed out the database name
    # if we have, we take only the remaining part of the message for further processing
    if [message] =~ "^\[" {

      dissect {
        mapping => {
          "message" => "[%{}] %{[@metadata][dissected_checkpoint_message]}"
        }
      }
    }
    else {
      mutate {
        copy => {
          "message" => "[@metadata][dissected_checkpoint_message]"
        }
      }
    }

    if [@metadata][dissected_checkpoint_message] =~ "^Checkpoint triggered by" {

      if "started" in [@metadata][dissected_checkpoint_message] {
        grok {
          match => {
            "[@metadata][dissected_checkpoint_message]" => 'Checkpoint triggered by%{SPACE}"%{GREEDYDATA:[neo4j][debug][checkpoint][trigger]}"%{SPACE}@%{SPACE}txId:%{SPACE}%{WORD:[neo4j][debug][checkpoint][txId]}%{SPACE}checkpoint started...'
          }
        }

      }
      else if "completed" in [@metadata][dissected_checkpoint_message] {
        grok {
          match => {
            "[@metadata][dissected_checkpoint_message]" => 'Checkpoint triggered by%{SPACE}"%{GREEDYDATA:[neo4j][debug][checkpoint][trigger]}"%{SPACE}@%{SPACE}txId:%{SPACE}%{WORD:[neo4j][debug][checkpoint][txId]}%{SPACE}checkpoint completed in%{SPACE}%{GREEDYDATA:[@metadata][additional_checkpoint_data]}'
          }
        }

        # Neo4j 5 has additional information in the checkpoint line
        # We check to see if this is a v5 line or not
        if "." in [@metadata][additional_checkpoint_data] {

          # split out the different sections of the message, giving array of size three
          # Based on https://github.com/neo4j/neo4j/blob/6ebc409772cea13354adb6a11aab4ed38da9d53e/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/log/checkpoint/CheckPointerImpl.java#L49
          mutate {
            split => {
              "[@metadata][additional_checkpoint_data]" => "."
            }
          }

          # First entry is the same as prior Neo4j 5
          mutate {
            rename => {
              "[@metadata][additional_checkpoint_data][0]" => "[@metadata][checkpointDuration]"
            }
          }

          # Second entry details page cache information

          grok {
            match => {
              "[[@metadata][additional_checkpoint_data][0]]" => "%{SPACE}Checkpoint flushed%{SPACE}%{NONNEGINT:[neo4j][debug][checkpoint][pages_flushed]:int}%{SPACE}pages \(%{NONNEGINT:[neo4j][debug][checkpoint][flushed_pagecache_percent]:int}\%%{SPACE}of total available pages\), in%{SPACE}%{NONNEGINT:[neo4j][debug][checkpoint][io][number_of_ios]:int}%{SPACE}IOs"
            }
          }

          # Third entry details IO information:

          grok {
            match => {
              "[[@metadata][additional_checkpoint_data][1]]" => "%{SPACE}Checkpoint performed with IO limit:%{SPACE}%{DATA}%{SPACE}, paused in total%{SPACE}%{NONNEGINT:[neo4j][debug][checkpoint][io][number_of_pauses]:int}%{SPACE}times\(%{SPACE}%{NONNEGINT:[neo4j][debug][checkpoint][io][pause_duration_ms]:int}"
            }
          }
        }
        else {
          # We can assume this is a checkpoint event prior to Neo4j 5 and parse a duration
          mutate {
            rename => {
              "[@metadata][additional_checkpoint_data]" => "[@metadata][checkpointDuration]"
            }
          }
        }

        # We must has a [@metadata][checkpointDuration] field before invoking this script
        if [@metadata][checkpointDuration] {
          ruby {
            path => "/usr/share/logstash/scripts/debug_logs/duration_parse.rb"
          }
        }
      }
    }
  }

  # parse out neo4j version information
  if [neo4j][debug][java_class] == "c.n.s.e.EnterpriseNeoWebServer" {
    if [message] =~ "^=+" {
      grok {
        match => {
          "message" => "=+ Neo4j (?<version>[4-9]\.[0-9]+\.[0-9]+) =+"
        }
      }
      mutate {
        rename => {
          "version" => "[neo4j][version]"
        }
        add_tag => ["startup"]
      }
    }
  }

  # required as per: https://github.com/elastic/ecs/issues/35
  # This GH issue seems to affect the file input plugin also
  mutate {
    remove_field => [ "host" ]
  }

  # ECS support
  mutate {
    replace => {
      "[event][dataset]" => "debug.log"
    }
  }
}
input {
  file {
    path => ["/home/logstash/data/**/**/logs/*debug.log*"]
    exclude => ["*.zip","*.tgz","*.gz"]
    mode => "read" 
    exit_after_read => true
    file_completed_action => log
    # must be set when file_completed_action is log
    file_completed_log_path => "/usr/share/logstash/debug_file.log"
    # uncomment for dev purposes
    #sincedb_path => "/dev/null" 
    start_position => "beginning" 
    tags => ["debug_log"]
    codec => multiline {
      pattern => "(^%{TIMESTAMP_ISO8601} )|(^{)"  
      negate => true
      what => previous 
      # Some debug logs contain a large amount of multiline data
      max_lines => 2000 
    }  
  }
}
output {
  elasticsearch {
    hosts => [ "${ECK_ES_HOSTS}" ]
    user => "${ECK_ES_USER}"
    password => "${ECK_ES_PASSWORD}"
    ssl_certificate_authorities => "${ECK_ES_SSL_CERTIFICATE_AUTHORITY}"
    data_stream => "true"
    data_stream_namespace => "synlig"
  }
}